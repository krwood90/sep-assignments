1 - What's the Big-O of the following algorithm? 
    Answer - O(1) - That is because no matter how many times it runs the algorithm it will always only run once.

    def goodbye_world(n)
        puts "Goodbye World! #{n}"
    end


2 - What's the Big-O of the following algorithm?
    Answer - O(n) - When it runs the algorithm, it will run an iteration for each element in the collection at a constant rate.

    def find_largest(collection)
        largest = collection[0]
        collection.length.times do |i|
            if collection[i] >= largest
                largest = collection[i]
            end
        end
        largest
    end


3 - What's the Big-O of the following algorithm?
    Answer - O(n^2) - When it runs the algorithm, it will cycle through the length of the collection and then also run through it for a second time inside the subarray.

     def find_largest(collection)
        largest = collection[0][0]
        collection.length.times do |i|
            subcollection = collection[i]
            subcollection.length.times do |i|
                if subcollection[i] >= largest
                    largest = subcollection[i]
                end
            end
        end
        largest
    end   


4 - What's the Big-O of the following algorithm?
    Answer - O(2^n) - When it runs the algorithm, it will have to go through cycle through itself repeatedly as it get larger until it gets down to 1 or zero
    def numbers(n)
        if (n == 0)
            return 0
        elsif (n == 1)
            return 1
        else
            return numbers(n-1) + numbers(n-2)
        end
    end


5 - What's the Big-O of the following algorithm?
    Answer - O(n) - When it runs the algorithm, the time is purely dependent on the size n.

    def iterative(n)
        num1 = 0
        num2 = 1

        i = 0
        while i < n-1
            tmp = num1 + num2
            num1 = num2
            num2 = tmp
            i+=1
        end

        num2
    end


6 - What's the Big-O of the following algorithm?
    Answer - O(n^2) - When it runs the algorithm, it is recursive and in the worst case will only reduce the collection size by one at a time.

    def sort(collection, from=0, to=nil)
        if to == nil

            # Sort the whole collection, by default
            to = collection.count - 1
        end

        if from >= to
        
            # Done sorting
            return
        end

        # Take a pivot value, at the far left
        pivot = collection[from]

        # Min and Max pointers
        min = from
        max = to

        # Current free slot
        free = min

        while min < max
            if free == min # Evaluate collection[max]
                if collection[max] <= pivot # Smaller than pivot, must move
                    collection[free] = collection[max]
                    min += 1
                    free = max
                else
                    max -= 1
                end
            elsif free == max # Evaluate collection[min]
                if collection[min] >= pivot # Bigger than pivot, must move
                    collection[free] = collection[min]
                    max -= 1
                    free = min
                else
                    min += 1
                end
            else
                raise "Inconsistent state"
            end
        end

        collection[free] = pivot

        sort collection, from, free - 1
        sort collection, free + 1, to

        collection
    end